I usually write my notes out on my ipad, but that is slow and annoying. Plus I have been leanring to type with 10 fingers.

CHAPTER 8: BUILDING AND SECURING WEB SERVICES USING MINIMAL APIS

• Building web services using ASP.NET Core Minimal APIs
• Relaxing the same origin security policy using CORS
• Preventing denial of service attacks using rate limiting
• Improving startup time and resources using native AOT
• Understanding identity services

<ImplicitUsings> does heavy lifting for removing boilerplate code

Minimal apis do not dynamically generate code like controllers allowing for native AOT for producing smaller, faster services

WebApplication instance has methods to route a lambda expression
• MapGet: Map a route to a GET request to retrieve an entity.
• MapPost: Map a route to a POST request to insert an entity.
• MapPut: Map a route to a PUT request to update an entity.
• MapPatch: Map a route to a PATCH request to update an entity.
• MapDelete: Map a route to a DELETE request to delete an entity.
• MapMethods: Map a route to any other HTTP method or methods, for example, CONNECT or HEAD.

If you have multiple endpoints that share common relative path you can define a group.

Parameter mapping
• [FromServices]: The parameter will be set from the registered dependency services.
• [FromRoute]: The parameter will be set from a matching named route segment.
• [FromQuery]: The parameter will be set from a matching named query string parameter.
• [FromBody]: The parameter will be set from the body of the HTTP request.

Our API for the app is defined by:
Method, Path, Request Body, Response Body, Success code
GET, /, None, "Hello World", 200
PUT, /api/products/{id}, Product Object, None, 204

Relaxing the same origin security policy using CORS:
If code executing in one browser tab can access resources in another browser tab on same pc, this can be attack vector
All modern web browsers have a security feature called the same origin policy.

An origin is defined by:
• Scheme aka protocol, for example, http or https.
• Port, for example, 801 or 5081. The default port for http is 80 and for https is 443.
• Host/domain/subdomain, for example, www.example.com, www.example.net, example.com.
If the origin is https://www.example.com/about-us/, then the following are not the same origin:
• Different scheme: http://www.example.com/about-us/
• Different host/domain: https://www.example.co.uk/about-us/
• Different subdomain: https://careers.example.com/about-us/
• Different port: https://www.example.com:444/about-us/

The same origin polcu is automatically set by web browser but not for requests from non-web brwosers (like httpClient)

Understaing CORS (Cross resource origin sharing): an HTTP-header based feature that asks the browser to disable its same-origion policy in specific scenarios.

The HTTP headers specify which resources should be accesible from a different origin

Cors Policies can be set on the whole app or specific endpoints


Preventing DOS (denial of service attack) using rate limiting:
Denial of service attack: is a malicious attempt to disrupt a web service by overwhelming it with requests. If all requests originate from same place (ip)
its easy to cut them off.
These attacks are often implented as a DDoS (Distributed Denial of Service) attack so you cannot seperate the attackers from genuine clients

Rate limiting is useful beyond just preventing attacks. You might want to charge a subscription for access to different tiers of a commerical web service.

Improving startup time and resources using native AOT:
AOT produces self-contained and pre-compiled native compiled

This can be very useful for massively scalable microservices that are frequently stopped and restarted.
Compiles intermediate code to native code at publihshing rather than JIT compiler (must target a platform)

Limitations of native AOT:
• No dynamic loading of assemblies.
• No runtime code generation, for example, using System.Reflection.Emit.
• It requires trimming, which has its own limitations.
• The assembly must be self-contained, so they must embed any libraries they call, which increases their size.

[RequiresDynamicCode] attribute indicates that a type of member does not support native AOT.
Annotate types with [DynamicallyAccessedMembers] so that to prevent runtime errors with AOT trimming


Understanding identity services: useed to authenticate and authorize users. Importatnt for these services to implement open standards such as:
OpenID Connect and OAuth 2.0

JSON Web Token (JWT) is a standard that defines a compact and secure method to transmit info as a JSON object.
THe object is digitally signed and commonly used for authorization.

A user logs in using whatever method and the trusted party issues a JWT.
Consists of three parts seperated by dots. header.payload.signature; HEader and payload are Base64 encoded.